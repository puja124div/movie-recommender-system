# -*- coding: utf-8 -*-
"""Movie_recommander_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qu6sc9jSCDUzbbzUt6NLb5vHVPD5Tkb4
"""

import numpy as np
import pandas as pd
import ast
import nltk

movies=pd.read_csv("tmdb_5000_movies.csv")
credits=pd.read_csv("tmdb_5000_credits.csv")

movies.head()

credits.head()

movies= movies.merge(credits,on='title')

movies=movies[1:4001]

movies.shape

movies.info()

movies=movies[['movie_id','title','genres','overview','keywords','cast','crew']]

movies.head()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres']=movies['genres'].apply(convert)

movies['keywords']=movies['keywords'].apply(convert)

def convert3(obj):
  L=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast']=movies['cast'].apply(convert3)

def fetch_director(obj):
  L=[]
  for i in ast.literal_eval(obj):
    if i['job']== 'Director':
      L.append(i['name'])
      break
  return L

movies['crew']=movies['crew'].apply(fetch_director)

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies['tags']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

df=movies[['movie_id','title','tags']]

df.head()

df['tags']=df['tags'].apply(lambda x:" ".join(x))

df['tags']=df['tags'].apply(lambda x:x.lower())

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
  y=[]
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

df['tags']=df['tags'].apply(stem)

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(stop_words='english',max_features=5000)

vectors=cv.fit_transform(df['tags']).toarray()

vectors

cv.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity
similarity=cosine_similarity(vectors).shape

similarity=cosine_similarity(vectors)

def recommend(movie):
  movie_index=df[df['title']== movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(df.iloc[i[0]].title)

recommend('Batman')

import pickle

pickle.dump(df,open('movies.pkl','wb'))

from google.colab import files
files.download('movies.pkl')

pickle.dump(similarity,open('similarity.pkl','wb'))

from google.colab import files
files.download('similarity.pkl')

similarity.shape